{"version":3,"sources":["components/Header.js","components/Countries.js","components/Home.js","components/Country.js","components/Footer.js","components/WrongPage.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","state","darkMode","darktStyle","handleSlider","_this","setState","react_default","a","createElement","Fragment","this","className","type","name","id","onChange","htmlFor","version","xmlns","width","height","viewBox","d","fill","Component","Countries","props","countries","itemsAll","slice","reverse","map","item","index","react_router_dom","to","pathname","concat","answer","key","src","image","alt","question","onError","e","target","onerror","Home","isLoaded","option","optionUpper","filtered","filterActive","regionChoosed","scroll","scrollCheck","window","scrollY","handleFilterRegion","handleCloseGlobalFilterRegion","handleChangeRegion","value","currentTarget","getAttribute","valueUpper","toUpperCase","length","_this2","addEventListener","fetch","then","response","ok","Error","status","json","data","catch","error","console","log","prevProps","prevState","_this3","removeEventListener","onClick","components_Countries","scrollTo","Country","alpha3Code","flag","nativeName","borders","Footer","WrongPage","App","routeItems","react_router","exact","path","render","components_Country","basename","process","components_Header","components_Home","components_WrongPage","components_Footer","Boolean","location","hostname","match","ReactDOM","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b8a095e9.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport '../style/Header.scss'\n\nclass Header extends Component {\n  state = {\n    darkMode: false,\n  }\n\n  darktStyle =\n    'body { background-color: hsl(207, 26%, 17%); } * {color:hsl(0, 0%, 100%);} .header, .footer {background-color: hsl(209, 23%, 22%)} .countryCard__description, .filter__chooseRegion, .filter__dropdown, .filter__searchInput, .scroll, .btn{background-color: hsl(209, 23%, 22%)} .filter__dropdown-item:hover{color:hsl(200, 15%, 8%); background-color: hsl(0,0%,100%);} .countryCard__description {border: 0} *:active, .scroll__arrowUp{color:hsl(0, 0%, 100%);} .scroll, .btn:hover{box-shadow: 0rem 0rem .5rem .2rem rgba(255, 255, 255, 0.4)} .btn:focus{box-shadow: inset 0rem 0rem .5rem .2rem rgba(255, 255, 255, 0.4)}'\n\n  handleSlider = () => {\n    this.setState({\n      darkMode: !this.state.darkMode,\n    })\n  }\n  render() {\n    return (\n      <>\n        {this.state.darkMode ? <style>{this.darktStyle}</style> : null}\n        <header className=\"header\">\n          <h1 className=\"header__logo\">757Live Network?</h1>\n          <div className=\"header__changeMode\">\n            <input\n              className=\"header__change-input\"\n              type=\"checkbox\"\n              name=\"mode\"\n              id=\"mode\"\n              onChange={this.handleSlider}\n            />\n            <label htmlFor=\"mode\" className=\"header__darkLightMode\">\n              <svg\n                className=\"header__icon-moon\"\n                version=\"1.1\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"20\"\n                height=\"20\"\n                viewBox=\"0 0 20 20\"\n              >\n                <title>moon</title>\n                <path\n                  d=\"M13.719 1.8c0.686 0.385 1.332 0.867 1.916 1.449 3.42 3.422 3.42 8.966 0 12.386s-8.965 3.42-12.386 0c-0.583-0.584-1.065-1.231-1.449-1.916 3.335 1.867 7.633 1.387 10.469-1.449s3.318-7.134 1.45-10.47z\"\n                  fill={\n                    this.state.darkMode\n                      ? 'hsl(0, 0%, 100%)'\n                      : 'hsl(209, 23%, 22%)'\n                  }\n                ></path>\n              </svg>\n              <span className=\"header__mode-name\">\n                {this.state.darkMode ? `Light Mode` : `Dark Mode`}\n              </span>\n            </label>\n          </div>\n        </header>\n      </>\n    )\n  }\n}\n\nexport default Header\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport '../style/Countries.scss'\n\nconst Countries = (props) => {\n  const countries = props.itemsAll.slice(0).reverse().map((item, index) => (\n    <Link to={{ pathname: `/${item.answer}`, state: { item: item.answer } }}>\n      <div className=\"countryCard\" key={index}>\n        <div className=\"countryCard__flag\">\n          <img\n            className=\"countryCard__flagImg\"\n            src={item.image}\n            alt={item.question}\n            onError={(e)=>{e.target.onerror = null;\n              e.target.src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/da/Google_News_icon.svg/200px-Google_News_icon.svg.png\"}}\n          />\n        </div>\n        <div className=\"countryCard__description\">\n          <h1 className=\"countryCard__primary\">{item.question}</h1>\n        </div>\n      </div>\n    </Link>\n  ))\n  return (\n    <>\n      <div className=\"countries-container\">{countries}</div>\n    </>\n  )\n}\n\nexport default Countries\n","import React, { Component } from 'react'\nimport { BrowserRouter as NavLink } from 'react-router-dom'\nimport Countries from '../components/Countries'\nimport '../style/Home.scss'\nclass Home extends Component {\n  state = {\n    itemsAll: [],\n    isLoaded: false,\n    option: 'all',\n    optionUpper: '',\n    filtered: '',\n    filterActive: false,\n    regionChoosed: false,\n    scroll: false,\n  }\n\n  componentDidMount() {\n    //Nasłuchiwanie scrolla, który umożliwi powrót na początek strony\n    window.addEventListener('scroll', this.scrollCheck, false)\n\n    fetch('https://mnrlive.github.io/api/resources.json')\n      .then((response) => {\n        if (response.ok) {\n          return response\n        } else {\n          throw Error(response.status)\n        }\n      })\n      .then((response) => response.json())\n      .then((data) => {\n        this.setState({\n          itemsAll: data.item,\n          isLoaded: true,\n        })\n      })\n      .catch((error) => console.log(error))\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.option !== this.state.option) {\n      //warunek jest po to, żeby fetch się zmieniał jeśli została wybrana opcja all to niech nie dodaje region, tylko opcje, żeby wyszło\n      //https://restcountries.eu/rest/v2/all, a jeśli została wybrana jakakolwiek inna opcja to niech doda region i wybrana opcje, żeby\n      //wyszło https://restcountries.eu/rest/v2/region/europe\n      fetch(\n        `https://mnrlive.github.io/api/resources.json?${\n          this.state.option === 'all' ? '' : 'region/'\n        }${this.state.option}`\n      )\n        .then((response) => {\n          if (response.ok) {\n            return response\n          } else {\n            throw Error(response.status)\n          }\n        })\n        .then((response) => response.json())\n        .then((data) => {\n          this.setState({\n            filtered: '', //wyczysc tablice filtered, jesli jest ona pusta to wyswietla sie wszystkie opcje z danej kategorii (wiaze sie z inputem, czyli jesli wybiore jakas opcje to wyzeruj tablice filtered i wartosc z input)\n            itemsAll: data.item,\n            isLoaded: true,\n          })\n        })\n        .catch((error) => console.log(error))\n    }\n  }\n\n  //Odmontowanie scrolla\n  componentWillUnmount() {\n    window.removeEventListener('scroll', this.scrollCheck, false)\n  }\n\n  scrollCheck = () => {\n    const beginScroll = window.scrollY < 100\n    if (beginScroll === false) {\n      this.setState({\n        scroll: true,\n      })\n    } else {\n      this.setState({\n        scroll: false,\n      })\n    }\n  }\n\n  //Toggle, jesli uzytkownik kliknie na Filter By Region to niech filter activ zmieni sie na true, jesli kliknie ponownie to na false\n  handleFilterRegion = () => {\n    this.setState({\n      filterActive: !this.state.filterActive,\n    })\n  }\n\n  //sluzy do zamkniecia dropdown listy zwiazanej z filtrowaniej jesli jest ona otwarta i uzytkownik kliknie w obszar diva homa\n  handleCloseGlobalFilterRegion = () => {\n    if (this.state.filterActive === true) {\n      this.setState({\n        filterActive: false,\n      })\n    }\n  }\n\n  //Pobranie wartosci kliknietej opcji w dropdown list, ustawienie stanu, jesli opcja zostanie wybrana to filterActive bedzie ustawiony na false w celu zamkniecia dropDown listy, regionChoosed zostaje ustawiony na true, w celu uzycia warunku, ktory zastapi Filter By Region wybrana opcja\n  handleChangeRegion = (e) => {\n    let value = e.currentTarget.getAttribute('value')\n    let valueUpper =\n      value.slice(0, 1).toUpperCase() + value.slice(1, value.length)\n    this.setState({\n      option: value,\n      optionUpper: valueUpper,\n      regionChoosed: true,\n      filterActive: false,\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"home\" onClick={this.handleCloseGlobalFilterRegion}>\n        <div className=\"filter\">\n          <div className=\"filter__selectPanel\">\n            <NavLink to=\"./\">\n              <span\n                onClick={this.handleFilterRegion}\n                className={\n                  this.state.filterActive\n                    ? 'filter__chooseRegion filter__chooseRegion--caretUp'\n                    : 'filter__chooseRegion filter__chooseRegion--caretDown'\n                }\n              >\n                {this.state.regionChoosed\n                  ? this.state.optionUpper\n                  : 'Filter by Region'}\n              </span>\n              <ul\n                className={\n                  this.state.filterActive\n                    ? 'filter__dropdown visible'\n                    : 'filter__dropdown'\n                }\n              >\n                <li\n                  className=\"filter__dropdown-item filter__dropdown-item--all\"\n                  value=\"all\"\n                  onClick={this.handleChangeRegion}\n                >\n                  All\n                </li>\n                <li\n                  className=\"filter__dropdown-item filter__dropdown-item--africa\"\n                  value=\"World\"\n                  onClick={this.handleChangeRegion}\n                >\n                  World\n                </li>\n                <li\n                  className=\"filter__dropdown-item filter__dropdown-item--americas\"\n                  value=\"Business\"\n                  onClick={this.handleChangeRegion}\n                >\n                  Business\n                </li>\n                <li\n                  className=\"filter__dropdown-item filter__dropdown-item--asia\"\n                  value=\"Technology\"\n                  onClick={this.handleChangeRegion}\n                >\n                  Technology\n                </li>\n                <li\n                  className=\"filter__dropdown-item filter__dropdown-item--europe\"\n                  value=\"Entertainment\"\n                  onClick={this.handleChangeRegion}\n                >\n                  Entertainment\n                </li>\n                <li\n                  className=\"filter__dropdown-item filter__dropdown-item--oceania\"\n                  value=\"Sports\"\n                  onClick={this.handleChangeRegion}\n                >\n                  Sports\n                </li>\n                <li\n                  className=\"filter__dropdown-item filter__dropdown-item--oceania\"\n                  value=\"Science\"\n                  onClick={this.handleChangeRegion}\n                >\n                  Science\n                </li>\n                <li\n                  className=\"filter__dropdown-item filter__dropdown-item--oceania\"\n                  value=\"Health\"\n                  onClick={this.handleChangeRegion}\n                >\n                  Health\n                </li>\n              </ul>\n            </NavLink>\n          </div>\n        </div>\n        {/* Warunek 1 jeśli dane jeszcze się nie załadowały, to niech wyświetli się napis Loading */}\n        {/* Warunek 2 jeśli tablica pofiltrowana jest pusta (bo nic nie ma w inpucie, bądź została wybrana jakaś opcja z droplisty) to wyświetl tablicę countries (czyli bezpośrednio z api), jeśli filtered nie jest puste to wyświetl kraje pofiltrowane */}\n        {this.state.isLoaded ? (\n          <Countries\n            itemsAll={\n              this.state.filtered === ''\n                ? this.state.itemsAll\n                : this.state.filtered\n            }\n          />\n        ) : (\n          <div className=\"loading\">\n            <span className=\"loading__loader\"></span>\n          </div>\n        )}\n        <div\n          className={this.state.scroll ? 'scroll' : null}\n          onClick={() => {\n            window.scrollTo(0, 0)\n          }}\n        >\n          <i\n            className={\n              this.state.scroll ? 'fas fa-arrow-up scroll__arrowUp' : null\n            }\n          ></i>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Home\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport '../style/Country.scss'\n\nconst Country = (props) => {\n  return (\n    <div className=\"country-container\">\n      <div className=\"country-container__back\">\n        <Link to=\"/\" className=\"navLink\">\n          <button className=\"btn country-container__button-back\">Back</button>\n        </Link>\n      </div>\n      <div className=\"country-details\">\n        <div className=\"country-details__flag\">\n          <img\n            className={`country-details__flagImg country-details__flagImg--${props.alpha3Code}`}\n            src={props.flag}\n            alt={props.name}\n          />\n        </div>\n        <div className=\"country-details__info\">\n          <h1 className=\"country-details__headingPrimary\">{props.name}</h1>\n          <ul className=\"info-list info-list--partOne\">\n            <li className=\"info-item info-item--nativeName\">\n              <h4 className=\"country-details__headingQuaternary\">\n                Native Name:\n              </h4>\n              {props.nativeName}\n            </li>\n\n            <li className=\"borders-item\">\n              <button className=\"btn btn--borders\">{props.borders}</button>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Country\n","import React from 'react'\nimport '../style/Footer.scss'\nconst Footer = () => {\n  return <footer className=\"footer\"></footer>\n}\n\nexport default Footer\n","import React from 'react'\nimport '../style/WrongPage.scss'\nconst WrongPage = () => {\n  return (\n    <>\n      <h1>Page not Found</h1>\n    </>\n  )\n}\n\nexport default WrongPage\n","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport Header from '../components/Header'\nimport Home from '../components/Home'\nimport Country from '../components/Country'\nimport Footer from '../components/Footer'\nimport WrongPage from '../components/WrongPage'\nimport '../style/App.scss'\n\nclass App extends Component {\n  /* https://restcountries.eu/ */\n  /* ALL  https://restcountries.eu/rest/v2/all */\n  /* Name - Search by country name. It can be the native name or partial name\n  https://restcountries.eu/rest/v2/name/{name}, https://restcountries.eu/rest/v2/name/united \n  */\n  /* Full Name - Search by country full name\n  https://restcountries.eu/rest/v2/name/{name}?fullText=true\n  https://restcountries.eu/rest/v2/name/aruba?fullText=true\n  */\n  /* Region - Search by region: Africa, Americas, Asia, Europe, Oceania\n  https://restcountries.eu/rest/v2/region/{region}\n  https://restcountries.eu/rest/v2/region/europe\n  */\n\n  state = {\n    itemsAll: [],\n  }\n\n  componentDidMount() {\n    fetch('https://mnrlive.github.io/api/resources.json')\n      .then((response) => {\n        if (response.ok) {\n          return response\n        } else {\n          throw Error(response.status)\n        }\n      })\n      .then((response) => response.json())\n      .then((data) => {\n        this.setState({\n          itemsAll: data.item,\n        })\n      })\n      .catch((error) => console.log(error))\n  }\n\n  render() {\n    const routeItems = this.state.itemsAll.map((item, index) => (\n      <Route\n        exact\n        path={`/${item.answer}`}\n        key={index}\n        render={() => (\n          <main className=\"main main--country\">\n            <Country\n              itemsAll={this.state.itemsAll}\n              flag={item.image}\n              name={item.question}\n              borders={item.answer}\n              alpha3Code={item.answer}\n              answer={item.answer}\n            />\n          </main>\n        )} //zeby country wyswietlalo odpowiednie panstwo zwiazane z linkiem\n      />\n    ))\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <>\n          <div className=\"App\">\n            <div className=\"container\">\n              <Header />\n\n              <Switch>\n                <Route\n                  exact\n                  path=\"/\"\n                  render={() => (\n                    <main className=\"main main--home\">\n                      <Home />{' '}\n                    </main>\n                  )}\n                />\n                {routeItems}\n                <Route\n                  render={() => (\n                    <main className=\"main main--error\">\n                      <WrongPage />\n                    </main>\n                  )}\n                />\n              </Switch>\n              <Footer />\n            </div>\n          </div>\n        </>\n      </Router>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}